stages:
#- runall
- build
- collate

# This is just a config to help trigger rest of the builds
#run_all_builds:
#  image: ubuntu:latest
#  stage: runall
#  variables:
#    GIT_STRATEGY: none
#  script:
#  - pwd
#  when: manual
#  allow_failure: false

# Build
build_osx_runtime:
  stage: build
  tags:
    - bokken-job
  variables:
    BOKKEN_VM: build_osx_runtime_vm
    BOKKEN_JOB: |
      resources:
        - name: build_osx_runtime_vm
          image: buildfarm/mac:latest
          flavor: m1.mac
          type: Unity::VM::osx
          num_instances: 1
          config:
            env_vars:
              - PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin
  when: manual
  script:
  - git submodule update --init --recursive
  - chmod +x external/buildscripts/bee
  - cd external/buildscripts
  - ./bee
  - cd ../..
  - perl external/buildscripts/build_runtime_osx.pl --stevedorebuilddeps=1
  - mkdir -p incomingbuilds/osx-i386
  - cp -r builds/ incomingbuilds/osx-i386/
  artifacts:
    paths:
    - incomingbuilds/osx-i386
    expire_in: 1 week
# Important! Do not remove this after_script!!  
  after_script:
    - /opt/post_build_script.sh

build_osx_classlibs:
  stage: build
  tags:
    - bokken-job
  variables:
    BOKKEN_VM: build_osx_classlibs_vm
    BOKKEN_JOB: |
      resources:
        - name: build_osx_classlibs_vm
          image: buildfarm/mac:latest
          flavor: m1.mac
          type: Unity::VM::osx
          num_instances: 1
          config:
            env_vars:
              - PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin
  when: manual
  script:
  - git submodule update --init --recursive
  - chmod +x external/buildscripts/bee
  - cd external/buildscripts
  - ./bee
  - cd ../..
  - perl external/buildscripts/build_classlibs_osx.pl --stevedorebuilddeps=1
  - mkdir -p incomingbuilds/classlibs
  - cp -r ZippedClasslibs.tar.gz incomingbuilds/classlibs/
  - cd incomingbuilds/classlibs
  - tar -pzxf ZippedClasslibs.tar.gz
  - rm -f ZippedClasslibs.tar.gz
  - cd ../..
  artifacts:
    paths:
    - incomingbuilds/classlibs
    expire_in: 1 week
# Important! Do not remove this after_script!!  
  after_script:
    - /opt/post_build_script.sh

build_android:
  stage: build
  tags:
    - bokken-job
  variables:
    BOKKEN_VM: build_android_vm
    BOKKEN_JOB: |
      resources:
        - name: build_android_vm
          image: buildfarm/mac:latest
          flavor: m1.mac
          type: Unity::VM::osx
          num_instances: 1
          config:
            env_vars:
              - PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin
  when: manual
  script:
  - git submodule update --init --recursive
  - chmod +x external/buildscripts/bee
  - cd external/buildscripts
  - ./bee
  - cd ../..
  - perl external/buildscripts/build_runtime_android.pl --stevedorebuilddeps=1
  - mkdir -p incomingbuilds/android/
  - cp -r builds/* incomingbuilds/android/
  artifacts:
    paths:
    - incomingbuilds/android
    expire_in: 1 week
# Important! Do not remove this after_script!!  
  after_script:
    - /opt/post_build_script.sh

build_win:
  stage: build
  tags:
  - bokken-job
  #- buildfarm
  #- windows
  variables:
    BOKKEN_VM: build_win_vm
    BOKKEN_JOB: |
      resources:
        - name: build_win_vm
          image: platform-foundation/windows-bokken:v0.1.3-72328
          flavor: b1.medium
          type: Unity::VM
          num_instances: 1
  when: manual
  script:
  - git submodule update --init --recursive
  - cd external/buildscripts
  - bee.exe
  - cd ../..
  - perl external/buildscripts/build_runtime_win64.pl --stevedorebuilddeps=1
  - mkdir -p incomingbuilds/win64
  - cp -r builds/* incomingbuilds/win64/
  artifacts:
    paths:
    - incomingbuilds/win64
    expire_in: 1 week
# Important! Do not remove this after_script!!
  after_script:
    - C:\Users\builduser\post_build_script.bat

build_win_x86:
  stage: build
  tags:
  - bokken-job
  #- buildfarm
  #- windows
  variables:
    BOKKEN_VM: build_win_x86_vm
    BOKKEN_JOB: |
      resources:
        - name: build_win_x86_vm
          image: platform-foundation/windows-bokken:v0.1.3-72328
          flavor: b1.medium
          type: Unity::VM
          num_instances: 1
  when: manual
  script:
  - git submodule update --init --recursive
  - cd external/buildscripts
  - bee.exe
  - cd ../..
  - perl external/buildscripts/build_runtime_win.pl --stevedorebuilddeps=1
  - mkdir -p incomingbuilds/win32
  - cp -r builds/* incomingbuilds/win32/
  artifacts:
    paths:
    - incomingbuilds/win32
    expire_in: 1 week
# Important! Do not remove this after_script!!
  after_script:
    - C:\Users\builduser\post_build_script.bat

build_win_bare_minimum:
  stage: build
  tags:
  - bokken-job
  #- buildfarm
  #- windows
  variables:
    BOKKEN_VM: build_win_bare_minimum_vm
    BOKKEN_JOB: |
      resources:
        - name: build_win_bare_minimum_vm
          image: platform-foundation/windows-bokken:v0.1.3-72328
          flavor: b1.medium
          type: Unity::VM
          num_instances: 1
  when: manual
  script:
  - git submodule update --init --recursive
  - cd external/buildscripts
  - bee.exe
  - cd ../..
  - perl external/buildscripts/build_unityscript_bareminimum_win.pl
  - mkdir -p incomingbuilds/bareminimum
  - cp -r builds/* incomingbuilds/bareminimum/
  artifacts:
    paths:
    - incomingbuilds/bareminimum
    expire_in: 1 week
# Important! Do not remove this after_script!!
  after_script:
    - C:\Users\builduser\post_build_script.bat

build_linux_x64:
  stage: build
  tags:
  - bokken-job
  #- buildfarm
  #- linux
  variables:
    BOKKEN_VM: build_linux_x64_vm
    BOKKEN_JOB: |
      resources:
        - name: build_linux_x64_vm
          image: platform-foundation/linux-bokken:latest
          flavor: b1.medium
          type: Unity::VM
          num_instances: 1
  when: manual
  script:
  - sudo apt-get update -qy && sudo apt-get -qy upgrade

  # Install ssh-agent if not already installed, it is required by Docker.
  # (change apt-get to yum if you use a CentOS-based image)
  - 'which ssh-agent || ( sudo apt-get install openssh-client -y )'

  # Run ssh-agent (inside the build environment)
  - eval $(ssh-agent -s)

  # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  - ssh-add <(echo "$HGCF_SSH_PRIVATE_KEY")

  # For Docker builds disable host key checking. Be aware that by adding that
  # you are suspectible to man-in-the-middle attacks.
  # WARNING: Use this only with the Docker executor, if you use it with shell
  # you will overwrite your user's SSH config.
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

  # In order to properly check the server's host key, assuming you created the
  # SSH_SERVER_HOSTKEYS variable previously, uncomment the following two lines
  # instead.
  # - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'

  # Save gitlab's main SSH private key to be used by other tools
  - '[[ -f /.dockerenv ]] && chmod 600 ~/.ssh/id_rsa && chmod 700 ~/.ssh'
  - sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
  - sudo apt install -qy apt-transport-https
  - echo "deb https://download.mono-project.com/repo/ubuntu stable-xenial main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
  - sudo apt -qy update
  - sudo apt install -qy mono-complete
  - sudo apt install -qy mono-devel
  - sudo apt-key adv --keyserver packages.microsoft.com --recv-keys EB3E94ADBE1229CF 
  - sudo apt-key adv --keyserver packages.microsoft.com --recv-keys 52E16F86FEE04B979B07E28DB02C46DF417A0893
  - sudo apt install -qy curl
  - sudo curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
  - sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
  - sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main" > /etc/apt/sources.list.d/dotnetdev.list'
  - sudo apt -qy update
  - sudo apt-get install -qy dotnet-sdk-2.1.4
  - dotnet --version
  - git submodule update --init --recursive
  - chmod +x external/buildscripts/bee
  - cd external/buildscripts
  - pwd
  - ls -al
  - which mono
  - mono --version
  - ./bee
  - cd ../..
  - perl external/buildscripts/build_runtime_linux.pl -build64=1 --stevedorebuilddeps=1
  - mkdir -p incomingbuilds/linux64
  - cp -r builds/* incomingbuilds/linux64/
  artifacts:
    paths:
    - incomingbuilds/linux64
    expire_in: 1 week
# Important! Do not remove this after_script!!  
  after_script:
    - /opt/post_build_script.sh

build_linux_x86:
  stage: build
  tags:
  - buildfarm
  - linux
  when: manual
  before_script:
  - which mono
  - mono --version
  script:
  - git submodule update --init --recursive
  - chmod +x external/buildscripts/bee
  - cd external/buildscripts
  - ./bee
  - cd ../..
  - perl external/buildscripts/build_runtime_linux.pl --stevedorebuilddeps=1
  - mkdir -p incomingbuilds/linux32
  - cp -r builds/* incomingbuilds/linux32/
  artifacts:
    paths:
    - incomingbuilds/linux32
    expire_in: 1 week
# Important! Do not remove this after_script!!  
  after_script:
    - /opt/post_build_script.sh

collate_builds:
  image: ubuntu:latest
  stage: collate
  when: manual
  dependencies:
  - build_android
  - build_osx_runtime
  - build_osx_classlibs
  - build_win
  - build_win_x86
  - build_win_bare_minimum
  - build_linux_x86
  - build_linux_x64
  before_script:
  - apt-get update -qy && apt-get -qy upgrade
  - apt-get install -qy perl
  - apt-get install -qy zip unzip
  - apt-get install -qy p7zip-full p7zip-rar
  script:
  - perl external/buildscripts/collect_allbuilds.pl
  - pwd
  - ls -al 
  artifacts:
    paths:
    - collectedbuilds/builds.7z
    expire_in: 1 week